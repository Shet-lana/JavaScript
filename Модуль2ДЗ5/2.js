/* Задание 2
Реализуйте класс ExtendedDate, унаследовав его от стандартного класса Date 
и добавив следующие возможности:
■ метод для вывода даты (числа и месяца) текстом;
■ метод для проверки – это прошедшая дата или будущая
(если прошедшая, то метод возвращает false; если будущая или текущая, то true);
■ метод для проверки – високосный год или нет;
■ метод, возвращающий следующую дату.
Создайте объект класса ExtendedDate и выведите на экран
результаты работы новых методов. */


class ExtendedDate extends Date {
    constructor(year, month, day) {
        super(year, month, day);
    }

    // Метод для отображения даты текстом
    toStringDate() {
        const days = ["первого", "второго", "третьего", "четвертого", "пятого",
                     "шестого", "седьмого", "восьмого", "девятого", "десятого",
                     "одиннадцатого", "двенадцатого", "тринадцатого", "четырнадцатого",
                     "пятнадцатого", "шестнадцатого", "семнадцатого", "восемнадцатого",
                     "девятнадцатого", "двадцатого", "двадцать первого", "двадцать второго",
                     "двадцать третьего", "двадцать четвертого", "двадцать пятого",
                     "двадцать шестого", "двадцать седьмого", "двадцать восьмого",
                     "двадцать девятого", "тридцатого", "тридцать первого"];
        
        const months = ["января", "февраля", "марта", "апреля", "мая", "июня",
                       "июля", "августа", "сентября", "октября", "ноября", "декабря"];
        
        const dateNumber = this.getDate(); // Получаем номер текущего дня
        const currentMonth = this.getMonth(); // Получаем индекс текущего месяца (от 0 до 11)
        
        return `${days[dateNumber - 1]} ${months[currentMonth]}`;
    }

    // Метод проверки, является ли дата прошедшей
    isPast() {
        const today = new Date();
        return this.getTime() < today.getTime();
    }

    // Метод проверки, является ли год високосным
    isLeapYear() {
        const year = this.getFullYear();
        return (year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0);
    }

    // Метод получения следующей даты
    nextDate() {
        const nextDay = new Date(this.getTime());
        nextDay.setDate(nextDay.getDate() + 1);
        return new ExtendedDate(nextDay.getFullYear(), nextDay.getMonth(), nextDay.getDate());
    }
}

// Создаем объект класса ExtendedDate
const myDate = new ExtendedDate(2023, 7, 15); // Год, месяц (отсчет с нуля!), день

// Выводим результаты работы методов
console.log(myDate.toStringDate()); // Выводим дату текстом
console.log(myDate.isPast()); // Проверяем, прошло ли событие
console.log(myDate.isLeapYear()); // Проверяем, високосный ли год
console.log(myDate.nextDate().toStringDate()); // Получаем следующую дату
